#!/bin/bash
# ineo 1.0.0 - Neo4j Instances Manager
# Copyright (C) 2015 Carlos Forero
#
# http://github.com/carlosforero/ineo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

VERSION=1.0.0

DEFAULT_HOME="$HOME/.ineo"

DEFAULT_VERSION='2.3.1'

DEFAULT_PORT='7474'

# NEO4J_HOSTNAME can be assigned from the environment, so can be changed
# with testing to use tars in tars_for_test folder
NEO4J_HOSTNAME="${NEO4J_HOSTNAME:-http://dist.neo4j.org}"

# INEO_HOSTNAME can be assigned from the environment, so it can be changed
# with testing to use a mock
INEO_HOSTNAME="${INEO_HOSTNAME:-https://raw.githubusercontent.com/cohesivestack/ineo/master}"

LOCK_DIR='/tmp/ineo.neo4j.instances.lock'

TEMP_DIR="/tmp/$$.ineo"

# Regular Colors
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'

# Underline
UNDERLINE='\033[4m'
ITALIC='\033[3m'
BOLD='\033[1m'

# No Format
NF='\033[0m'

# ==============================================================================
# SET INSTANCES FUNCTION
# ==============================================================================

function set_instances {
  if [ -d ${INEO_HOME}/instances ]; then
    local instance_name
    for instance_name in `ls ${INEO_HOME}/instances`; do
      if [ -d  ${INEO_HOME}/instances/${instance_name} ]; then
        INSTANCES+=($instance_name)
      fi
    done;
  fi
}

set_instances

# ==============================================================================
# INVALID COMMAND FUNCTION
# ==============================================================================

function invalid_command_param {
  local param=$1
  local command=$2
  printf "\n  ${PURPLE}Error -> Invalid argument or option ${BOLD}${param}\n"
  printf "\n  ${NF}View help about the command ${UNDERLINE}${command}${NF} typing:"
  printf "\n    ${CYAN}ineo help ${command}${NF}\n\n"
}

# ==============================================================================
# INSTALL
# ==============================================================================

function install {

  shift
  while getopts ":d:" optname
  do
    case "${optname}" in
      d)
        INEO_HOME=${OPTARG}
        ;;
      *)
        invalid_command_param $OPTARG 'install'
        exit 1
        ;;
    esac
  done

  local arg1=${@:$OPTIND:1}
  if [ ! -z "$arg1" ]; then
    invalid_command_param $arg1 'install'
    exit 1
  fi

  # Set INEO_HOME variable
  if [ -z "$INEO_HOME" ]; then
    INEO_HOME=$DEFAULT_HOME
  fi

  # Check if directory is an absolute directory
  if [[ ! $INEO_HOME =~ ^/ ]]; then
    printf "\n  ${PURPLE}Error -> The directory ${BOLD}$INEO_HOME${PURPLE} is not an absolute path\n"
    printf "\n  ${NF}Use directories like:"
    printf "\n    ${CYAN}/opt/ineo"
    printf "\n    ~/.ineo${NF}\n\n"
    exit 1
  fi

  # Check if directory exists
  if [ -d "$INEO_HOME" ]; then
    printf "\n  ${PURPLE}Error -> The directory ${BOLD}$INEO_HOME${PURPLE} already exists\n"
    printf "\n  ${NF}If you want reinstall ineo then uninstall it with:"
    printf "\n    ${CYAN}ineo uninstall -d $INEO_HOME\n"
    printf "\n  ${NF}or ensure the directory doesn't contain anything important then remove it with:"
    printf "\n    ${CYAN}rm -r $INEO_HOME${NF}\n\n"
    exit 1
  fi

  # Create folders
  local folders=(bin neo4j instances cache)
  local folder
  for folder in "${folders[@]}"; do
    mkdir "$TEMP_DIR/$folder"
  done

  # self copy to folder bin of ineo
  if [[ `basename "$0"` == 'ineo' ]]; then
    cp $0 ${TEMP_DIR}/bin
  else
    curl -sSL ${INEO_HOSTNAME}/ineo > ${TEMP_DIR}/bin/ineo
  fi

  chmod 755 ${TEMP_DIR}/bin/ineo

  # Create variable
  local line_for_bashrc="export INEO_HOME=$INEO_HOME; export PATH=\$INEO_HOME/bin:\$PATH"

  # If not exists a line with the current Ineo home directory then proceeds to
  # create it
  if ! grep -Fq "$line_for_bashrc" ~/.bashrc; then
    # Remove any old set variable
    sed -i.bak '/export INEO_HOME=/d' ~/.bashrc

    # Add the line in .bashrc to export the variable
    echo "$line_for_bashrc" >> ~/.bashrc
  fi

  # Move the TEMP_DIR to the target directory for ineo
  mv ${TEMP_DIR} $INEO_HOME

  printf "\n  ${GREEN}Ineo was successfully installed in ${BOLD}$INEO_HOME\n"
  printf "\n  ${NF}To start using the ${UNDERLINE}ineo${NF} command reopen your terminal or enter:"
  printf "\n    ${CYAN}source ~/.bashrc${NF}\n\n"
  exit 0
}

# ==============================================================================
# UNINSTALL
# ==============================================================================

function uninstall {
  local forced=false

  shift
  while getopts ":d:f" optname
  do
    case "${optname}" in
      d)
        INEO_HOME=${OPTARG}
        ;;
      f)
        forced=true
        ;;
      *)
        invalid_command_param $OPTARG 'uninstall'
        exit 1
        ;;
    esac
  done

  local arg1=${@:$OPTIND:1}
  if [ ! -z "$arg1" ]; then
    invalid_command_param $arg1 'uninstall'
    exit 1
  fi

  # Check if INEO_HOME variable is set
  if [ -z "$INEO_HOME" ]; then
    printf "\n  ${PURPLE}Error -> The variable ${BOLD}\$INEO_HOME${PURPLE} is not set\n"
    printf "\n  ${NF}Are you sure that Ineo is installed?\n\n"
    exit 1
  fi

  # Check if the directory is an absolute directory
  if [[ ! $INEO_HOME =~ ^/ ]]; then
    printf "\n  ${PURPLE}Error -> The directory ${BOLD}$INEO_HOME${PURPLE} is not an absolute path\n"
    printf "\n  ${NF}Use directories like:"
    printf "\n    ${CYAN}/opt/ineo"
    printf "\n    ~/.ineo${NF}\n\n"
    exit 1
  fi

  if ! $forced; then
    # Check if the directory exists
    if [ ! -d "$INEO_HOME" ]; then
      printf "\n  ${PURPLE}Error -> The directory ${BOLD}$INEO_HOME${PURPLE} doesn't exists\n"
      printf "\n  ${NF}Are you sure that Ineo is installed?\n\n"
      exit 1
    fi

    # Check if the directory looks like an Ineo directory
    if [ ! -d "$INEO_HOME/bin" ] || [ ! -d "$INEO_HOME/neo4j" ] || [ ! -d "$INEO_HOME/instances" ]; then
      printf "\n  ${YELLOW}Warning -> The directory ${RED}$INEO_HOME${YELLOW} doesn't look like an Ineo directory.${NF}\n\n"
      read -p  "  Are you sure this directory is an Ineo directory? (y/n) " -r
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
      fi
    fi

    printf "\n  ${YELLOW}Warning -> This action will remove everything in ${RED}$INEO_HOME${NF}\n\n"
    read -p  "  Are you sure you want to do this action? (y/n) " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
    fi
  fi

  # Remove directory
  rm -r $INEO_HOME

  # Replace the directories separator (/) by (\/), so it can be used with sed
  INEO_HOME=${INEO_HOME//\//\\\/}
  # Remove variable in .bashrc
  sed -i.bak "/export INEO_HOME=$INEO_HOME; export PATH=\$INEO_HOME\/bin:\$PATH/d" ~/.bashrc

  printf "\n  ${GREEN}Ineo was successfully uninstalled.${NF}\n\n"
  exit 0
}

# ==============================================================================
# VERSION
# ==============================================================================

function version {
  if [ ! -z $2 ]; then
    invalid_command_param $2 'version'
    exit 1
  fi

  printf "\n  The installed version of ineo is ${BOLD}${VERSION}${NF}\n\n"
}

# ==============================================================================
# UPDATE
# ==============================================================================

function update {
  if [ ! -z $2 ]; then
    invalid_command_param $2 'update'
    exit 1
  fi

  local local_file=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd)/`basename "${BASH_SOURCE[0]}"`

  local remote_file=${TEMP_DIR}/remote_ineo

  curl -s -o $remote_file ${INEO_HOSTNAME}/ineo

  if cmp --silent $local_file $remote_file; then
    printf "\n  The last ineo version already is installed!\nso nothing was updated\n\n"
    version
  else
    chmod 700 $remote_file
    $remote_file UPDATE_SCRIPT_BATCH $INEO_HOME $TEMP_DIR $VERSION
  fi
  exit 0
}

# ==============================================================================
# UPDATE_SCRIPT_BATCH
# ==============================================================================

function update_script_batch {

  local ineo_home=$2
  local temp_dir=$3
  local old_version=$4

  local local_file=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd)/`basename "${BASH_SOURCE[0]}"`

  cp $local_file $ineo_home/bin/ineo

  printf "\n  ${GREEN}Ineo was successfully upgraded from ${BOLD}$old_version${GREEN} to ${BOLD}$VERSION${NF}\n\n"

}


# ==============================================================================
# CREATE
# ==============================================================================

function create {
  local port=$DEFAULT_PORT
  local version=$DEFAULT_VERSION
  local force_download=false
  local force_install=false
  local address

  shift
  while getopts ":p:s:v:a:df" optname
  do
    case "${optname}" in
      p)
        port=${OPTARG}
        ;;
      s)
        https_port=${OPTARG}
        ;;
      v)
        version=${OPTARG}
        ;;
      a)
        address=${OPTARG}
        ;;
      d)
        force_download=true
        ;;
      f)
        force_install=true
        ;;
      *)
        invalid_command_param $OPTARG 'create'
        exit 1
        ;;
    esac
  done
  local instance_name=${@:$OPTIND:1}

  shift
  local arg2=${@:$OPTIND:1}
  if [ ! -z "$arg2" ]; then
    invalid_command_param $arg2 'create'
    exit 1
  fi

  # The action create always requires an instance name
  if [[ -z "$instance_name" ]]; then
    printf "\n  ${PURPLE}Error -> create requires an instance name\n"
    printf "\n  ${NF}View help about the command ${UNDERLINE}create${NF} typing:"
    printf "\n    ${CYAN}ineo help create${NF}\n\n"
    exit 1
  fi

  local tar_name="neo4j-community-$version-unix.tar.gz"

  # Donwload and create tar if doesn't exists
  if ! [ -f ${INEO_HOME}/neo4j/${tar_name} ] || $force_download; then
    curl -o ${TEMP_DIR}/${tar_name} ${NEO4J_HOSTNAME}/${tar_name}

    mv ${TEMP_DIR}/${tar_name} ${INEO_HOME}/neo4j/${tar_name}
  fi

  # Create tmp dir to extract
  mkdir -p ${TEMP_DIR}/${version}
  # if is not extracted then the tar maybe is not good, so a message suggesting
  # to use -d option is showed
  if ! tar -xzf ${INEO_HOME}/neo4j/${tar_name} \
    -C ${TEMP_DIR}/${version} &> /dev/null; then
    printf "\n  ${PURPLE}Error -> The tar file ${BOLD}${tar_name}${PURPLE} can't be extracted\n"
    printf "\n  ${NF}Try run the command ${UNDERLINE}create${NF} with the -d option to download the tar file again\n\n"
    exit 1
  fi

  # If directory for the instance exists then a message suggesting run or
  # install with the option -f is showed
  if [ -d ${INEO_HOME}/instances/${instance_name} ] && ! $force_install ; then
    printf "\n  ${PURPLE}Error -> A directory for the instance ${BOLD}${instance_name}${PURPLE} already exists\n"
    printf "\n  ${NF}Maybe the instance already was created or try run the command ${UNDERLINE}install${NF} with the -f option to force the installation\n\n"
    exit 1
  fi

  if $force_install ; then
    rm -rf ${INEO_HOME}/instances/${instance_name}
  fi

  # Create a hidden file with the version used in this installation
  echo $version > ${TEMP_DIR}/${version}/neo4j-community-${version}/.version

  # Finnaly move the instance for installation
  mv ${TEMP_DIR}/${version}/neo4j-community-${version} ${INEO_HOME}/instances/${instance_name}

  # Set the port on the configuration file
  https_port=${https_port:-$((${port} + 1))}
  set_port $instance_name $port
  set_https_port $instance_name $https_port

  # Set the webserver address in the configuration file
  if [[ -n $address ]] ; then
    set_address $address
  fi
  
  printf "\n  ${GREEN}The instance ${BOLD}${instance_name}${GREEN} was successfully created.${NF}\n\n"
}

function set_address {
  local address=$1
  sed -i.bak "/org\.neo4j\.server\.webserver\.address=/s/^#//g" \
  ${INEO_HOME}/instances/${instance_name}/conf/neo4j-server.properties
  sed -i.bak "/org\.neo4j\.server\.webserver\.address=/s/[0-9]\.[0-9]\.[0-9]\.[0-9]/$address/" \
  ${INEO_HOME}/instances/${instance_name}/conf/neo4j-server.properties
}

# ==============================================================================
# ACTIONS
# ==============================================================================

function action {
  local action_name=${@:$OPTIND:1}
  local quiet=false

  shift
  while getopts ":q" optname
  do
    case "${optname}" in
      q)
        quiet=true
        ;;
      *)
        invalid_command_param $OPTARG $action_name
        exit 1
        ;;
    esac
  done

  local instance_name=${@:$OPTIND:1}

  shift
  local arg2=${@:$OPTIND:1}
  if [ ! -z "$arg2" ]; then
    invalid_command_param $arg2 $action_name
    exit 1
  fi

  local instances=()

  # If is not specified the instance name, then apply on all instances
  if [ -z "$instance_name" ]; then

    # Console requires an instance name
    if [ $action_name == 'console' ]; then
      printf "\n  ${PURPLE}Error -> console requires an instance name\n"
      printf "\n  ${NF}View help about the command ${UNDERLINE}console${NF} typing:"
      printf "\n    ${CYAN}ineo help console${NF}\n\n"
      exit 1
    fi

    # If no instances then an error messages
    if [ -z "$INSTANCES" ]; then
      printf "\n  ${PURPLE}Error -> No instances created\n"
      printf "\n  ${NF}Try create an instance with the command:"
      printf "\n    ${CYAN}ineo create [your_instance_name]${NF}\n\n"
    fi

    # Confirmation for critical actions
    if [[ $action_name == 'start' || $action_name == 'stop' || $action_name == 'restart' ]] && [ "$quiet" == false ]; then
      printf "\n  ${YELLOW}Warning -> A Neo4j instance name is not specified.${NF}\n\n"
      read -p  "  Are you sure you want to ${action_name} all instances? (y/n) " -r
      echo    # (optional) move to a new line
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
      fi
    fi
    instances=("${INSTANCES[@]}")
  else
    if [ ! -d ${INEO_HOME}/instances/${instance_name} ]; then
      printf "\n  ${PURPLE}Error -> There is not an instance with the name ${BOLD}${instance_name}\n"
      printf "\n  ${NF}You can create an instance with the command:"
      printf "\n    ${CYAN}ineo create ${instance_name}${NF}\n\n"
      exit 1
    fi
    instances[0]=$instance_name
  fi

  local instance_name
  for instance_name in "${instances[@]}"; do
    if [ ! -f ${INEO_HOME}/instances/${instance_name}/bin/neo4j ]; then
      printf "\n  ${PURPLE}Error -> The instance ${BOLD}${instance_name}${PURPLE} seems that is not properly installed\n"
      printf "\n  ${NF}You can recreate the instance with the command:"
      printf "\n    ${CYAN}ineo create -f ${instance_name}${NF}\n\n"
      exit 1
    fi

    printf "\n  ${action_name} '${instance_name}'\n  "

    ${INEO_HOME}/instances/${instance_name}/bin/neo4j $action_name

  done
  printf "\n"
}

# ==============================================================================
# SHELL
# ==============================================================================

function shell {
  shift
  while getopts "::" optname
  do
    case "${optname}" in
      *)
        invalid_command_param $OPTARG 'shell'
        exit 1
        ;;
    esac
  done

  local instance_name=${@:$OPTIND:1}

  shift
  local arg2=${@:$OPTIND:1}
  if [ ! -z "$arg2" ]; then
    invalid_command_param $arg2 'shell'
    exit 1
  fi

  # Shell requires an instance name
  if [ -z "$instance_name" ]; then
    printf "\n  ${PURPLE}Error -> shell requires an instance name\n"
    printf "\n  ${NF}View help about the command ${UNDERLINE}shell${NF} typing:"
    printf "\n    ${CYAN}ineo help shell${NF}\n\n"
    exit 1
  fi

  # Check if the directory exists
  if [ ! -d "$INEO_HOME/instances/${instance_name}" ]; then
    printf "\n  ${PURPLE}Error -> There is not an instance with the name ${BOLD}${instance_name}\n"
    printf "\n  ${NF}List installed instances typing:"
    printf "\n    ${CYAN}ineo instances${NF}\n\n"
    exit 1
  fi

  # Check if the instance is running
  if [ ! -f "$INEO_HOME/instances/${instance_name}/data/neo4j-service.pid" ]; then

    printf "\n  ${PURPLE}Error -> The instance ${BOLD}${instance_name}${PURPLE} is not running\n"
    printf "\n  ${NF}Try start the instance typing:"
    printf "\n    ${CYAN}ineo start '${instance_name}'${NF}\n\n"
    exit 1
  fi

  ${INEO_HOME}/instances/${instance_name}/bin/neo4j-shell

  exit 0

}


# ==============================================================================
# DESTROY
# ==============================================================================

function destroy {
  local force=false

  shift
  while getopts ":f" optname
  do
    case "${optname}" in
      f)
        force=true
        ;;
      *)
        invalid_command_param $OPTARG 'destroy'
        exit 1
        ;;
    esac
  done

  local instance_name=${@:$OPTIND:1}

  shift
  local arg2=${@:$OPTIND:1}
  if [ ! -z "$arg2" ]; then
    invalid_command_param $arg2 'destroy'
    exit 1
  fi

  # Destroy requires an instance name
  if [[ -z "$instance_name" ]]; then
    printf "\n  ${PURPLE}Error -> destroy requires an instance name\n"
    printf "\n  ${NF}View help about the command ${UNDERLINE}destroy${NF} typing:"
    printf "\n    ${CYAN}ineo help destroy${NF}\n\n"
    exit 1
  fi

  # Check if the directory exists
  if [ ! -d "$INEO_HOME/instances/${instance_name}" ]; then
    printf "\n  ${PURPLE}Error -> There is not an instance with the name ${BOLD}${instance_name}\n"
    printf "\n  ${NF}List installed instances typing:"
    printf "\n    ${CYAN}ineo instances${NF}"
    exit 1
  fi

  # Confirm destroy
  if [[ "$force" == false ]]; then
    printf "\n  ${YELLOW}Warning -> Destroying the instance ${RED}${instance_name}${YELLOW} will remove all data for this instance${NF}\n\n"
    read -p  "  Are you sure you want to destroy the '${instance_name}'? (y/n) " -r
    echo    # (optional) move to a new line
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
    fi
  fi

  # Check if the instance is running
  if [ -f "$INEO_HOME/instances/${instance_name}/data/neo4j-service.pid" ]; then

    if [[ "$force" == false ]]; then
      printf "\n  ${YELLOW}Warning -> The instance ${RED}${instance_name}${YELLOW} is running.${NF}\n\n"
      read -p  "  Are you sure you want to stop '${instance_name}' and destroy? (y/n) " -r
      echo    # (optional) move to a new line
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
      fi
    fi

    # Stop the instance
    ${INEO_HOME}/instances/${instance_name}/bin/neo4j stop
  fi

  rm -fr ${INEO_HOME}/instances/${instance_name}

  printf "\n  ${GREEN}The instance ${BOLD}${instance_name}${GREEN} was successfully destroyed.${NF}\n\n"
  exit 0

}

# ==============================================================================
# INSTANCES
# ==============================================================================

function instances {
  if [ ! -z $2 ]; then
    invalid_command_param $2 'instances'
    exit 1
  fi

  if [ ${#INSTANCES[@]} -eq 0  ]; then
    printf "\n  There are not any created instance yet\n"
    printf "\n  Create the first one using the command ${UNDERLINE}create$\n"
    printf "\n  View help about the command ${UNDERLINE}create${NF} typing:\n"
    printf "      ${CYAN}ineo help create${NF}\n"
  else
    local instance_name
    for instance_name in "${INSTANCES[@]}"; do
      version=$(head -n 1 $INEO_HOME/instances/$instance_name/.version)
      port=$(sed -n '/^org\.neo4j\.server\.webserver\.port=\(.*\)$/s//\1/p' \
        $INEO_HOME/instances/$instance_name/conf/neo4j-server.properties)
      ssl=$(sed -n '/^org\.neo4j\.server\.webserver\.https.port=\(.*\)$/s//\1/p' \
        $INEO_HOME/instances/$instance_name/conf/neo4j-server.properties)

      printf "\n  > instance '$instance_name'"
      printf "\n    VERSION: ${version}"
      printf "\n    PATH:    ${INEO_HOME}/instances/${instance_name}"
      printf "\n    PORT:    ${port}"
      printf "\n    HTTPS:   ${ssl}\n"
    done
    printf "\n"
  fi
}

# ==============================================================================
# SET-PORT
# ==============================================================================

function set_port {
  local instance_name=$1
  local port=$2
  local major_version_number=${version%%.*}

  if [ $major_version_number -lt 3 ]; then
    sed -i.bak "/^\(org\.neo4j\.server\.webserver\.port=\).*/s//\1$port/" \
    ${INEO_HOME}/instances/${instance_name}/conf/neo4j-server.properties
  else
    sed -i.bak "/dbms\.connector\.http\.address=/s/^#//" \
      ${INEO_HOME}/instances/${instance_name}/conf/neo4j.conf

    sed -i.bak "/dbms\.connector\.http\.address=/s/[0-9][0-9][0-9][0-9]/$port/" \
      ${INEO_HOME}/instances/${instance_name}/conf/neo4j.conf
  fi
}

function set_https_port {
  local instance_name=$1
  local port=$2
  local major_version_number=${version%%.*}
  
  if [ $major_version_number -lt 3 ]; then
    sed -i.bak "/^\(org\.neo4j\.server\.webserver\.https\.port=\).*/s//\1$port/" \
      ${INEO_HOME}/instances/${instance_name}/conf/neo4j-server.properties
  else
    sed -i.bak "/dbms\.connector\.https\.address=/s/^#//" \
      ${INEO_HOME}/instances/${instance_name}/conf/neo4j.conf

    sed -i.bak "/dbms\.connector\.http\.address=/s/[0-9][0-9][0-9][0-9]/$port/" \
      ${INEO_HOME}/instances/${instance_name}/conf/neo4j.conf
  fi

}

# Command
function set-port {
  local https=false

  shift
  while getopts ":s" optname
  do
    case "${optname}" in
      s)
        https=true
        ;;
      *)
        invalid_command_param $OPTARG 'set-port'
        exit 1
        ;;
    esac
  done

  local instance_name=${@:$OPTIND:1}

  shift
  local port=${@:$OPTIND:1}

  shift
  local arg=${@:$OPTIND:1}
  if [ ! -z "$arg" ]; then
    invalid_command_param $arg 'set-port'
    exit 1
  fi

  if [ -z "$instance_name" ] || [ -z "$port" ]; then
    printf "\n  ${PURPLE}Error -> ${BOLD}set-port${PURPLE} requires an instance name and a port number\n"
    printf "\n  ${NF}View help about the command ${UNDERLINE}set-port${NF} typing:"
    printf "\n    ${CYAN}ineo help set-port${NF}\n\n"
    exit 1
  fi

  if [[ ! $port =~ ^[0-9]+$ ]]; then
    printf "\n  ${PURPLE}Error -> The port must be a positive integer number\n"
    printf "\n  ${NF}View help about the command ${UNDERLINE}set-port${NF} typing:"
    printf "\n    ${CYAN}ineo help set-port${NF}\n\n"
    exit 1
  fi

  if (( port < 1 || port > 65535 )); then
    printf "\n  ${PURPLE}Error -> The port must be a number between ${BOLD}1${PURPLE} and ${BOLD}65535\n"
    printf "\n  ${NF}View help about the command ${UNDERLINE}set-port${NF} typing:"
    printf "\n    ${CYAN}ineo help set-port${NF}\n\n"
    exit 1
  fi

  # Check if the configuration file doesn't exists
  if [ ! -f "$INEO_HOME/instances/${instance_name}/conf/neo4j-server.properties" ]; then
    printf "\n  ${PURPLE}Error -> There is not an instance with the name ${BOLD}${instance_name}${PURPLE} or is not properly installed\n"
    printf "\n  ${NF}List installed instances typing:"
    printf "\n    ${CYAN}ineo instances${NF}\n\n"
    exit 1
  fi

  if [[ "$https" == true ]]; then
    set_port $instance_name $port

    printf "\n  ${GREEN}The https port was successfully changed to ${BOLD}$port${GREEN}.${NF}\n\n"
  else
    set_https_port $instance_name $port

    printf "\n  ${GREEN}The http port was successfully changed to ${BOLD}$port${GREEN}.${NF}\n\n"
  fi

}

# ==============================================================================
# DELETE-DB
# ==============================================================================

# Command
function delete-db {
  local force=false

  shift
  while getopts ":f" optname
  do
    case "${optname}" in
      f)
        force=true
        ;;
      *)
        invalid_command_param $OPTARG 'delete-db'
        exit 1
        ;;
    esac
  done

  local instance_name=${@:$OPTIND:1}

  shift
  local arg=${@:$OPTIND:1}
  if [ ! -z "$arg" ]; then
    invalid_command_param $arg 'delete-db'
    exit 1
  fi

  # delete-db requires an instance name
  if [[ -z "$instance_name" ]]; then
    printf "\n  ${PURPLE}Error -> ${BOLD}delete-db${PURPLE} requires an instance name\n"
    printf "\n  ${NF}View help about the command ${UNDERLINE}delete-db${NF} typing:"
    printf "\n    ${CYAN}ineo help delete-db${NF}\n\n"
    exit 1
  fi

  # Check if the directory exists
  if [ ! -d "$INEO_HOME/instances/${instance_name}" ]; then
    printf "\n  ${PURPLE}Error -> There is not an instance with the name ${BOLD}${instance_name}${PURPLE} or is not properly installed\n"
    printf "\n  ${NF}List installed instances typing:"
    printf "\n    ${CYAN}ineo instances${NF}\n\n"
    exit 1
  fi

  # Confirm delete-db
  if [[ "$force" == false ]]; then
    printf "\n  ${YELLOW}Warning -> ${RED}delete-db${YELLOW} on the instance ${BOLD}${instance_name}${YELLOW} will remove all data for this instance${NF}\n\n"
    read -p  "  Are you sure you want to continue clearing the data for '${instance_name}'? (y/n) " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
    fi
  fi

  # Check if the instance is running
  if [ -f "$INEO_HOME/instances/${instance_name}/data/neo4j-service.pid" ]; then

    if [[ "$force" == false ]]; then
      printf "\n  ${YELLOW}Warning -> The instance ${RED}${instance_name}${YELLOW} is running.${NF}\n\n"
      read -p  "  Are you sure you want to stop '${instance_name}' and clear the data? (y/n) " -r

      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
      fi
    fi

    # Stop the instance
    ${INEO_HOME}/instances/${instance_name}/bin/neo4j stop
  fi

  if [ ! -d "$INEO_HOME/instances/${instance_name}/data/graph.db" ]; then
    printf "\n  There is not a database on the instance ${UNDERLINE}${instance_name}${NF}, so nothing was removed\n\n"
    exit 0
  fi

  rm -rf ${INEO_HOME}/instances/${instance_name}/data/graph.db

  printf "\n  ${GREEN}The data for the instance ${BOLD}${instance_name}${GREEN} was successfully removed${NF}\n\n"
  exit 0

}

# ==============================================================================
# VERSIONS
# ==============================================================================

function versions {
  local update=false

  shift
  while getopts ":u" optname
  do
    case "${optname}" in
      u)
        update=true
        ;;
      *)
        invalid_command_param $OPTARG 'versions'
        exit 1
        ;;
    esac
  done

  local arg2=${@:$OPTIND:1}
  if [ ! -z "$arg2" ]; then
    invalid_command_param $arg2 'versions'
    exit 1
  fi

  local fetch=''
  local page=1
  local cache_file=$INEO_HOME/cache/versions
  local releases=''
  local error=''

  if [ ! -f $cache_file ] || [ ! -s $cache_file ] || [ "$update" == true ]; then
    while [ "$page" -eq 1 ] || [ ! -z "$fetch" ]; do
      fetch="$(curl -s https://api.github.com/repos/neo4j/neo4j/releases?page=$page)"
      fetch="$(echo $fetch | grep -o -E '"[0-9]+\.[0-9]+\.[0-9]+"' | sed 's/"/  /g')"
      releases+="$fetch\n"
      ((page++))
    done
    releases="$(echo -e "$releases" | sort )"

    if [ -z "$releases" ]; then
      error="\n  ${PURPLE}Error -> Is not possible to connect to the Neo4j Github site.${NF}\n  Please check your internet connection or retry in some minutes\n\n"
    else
      echo -e "$releases" > $cache_file
    fi
  fi

  if [ -f $cache_file ] && [ -s $cache_file ]; then
    local updated_at="$(ls -l $cache_file | awk '{print $6, $7, $8 }')"
    cat $cache_file | sed "s/$DEFAULT_VERSION/$DEFAULT_VERSION <- recommended and default for this Ineo's installation/"
    printf "\n  These are the Neo4j versions available until $updated_at\n"
    printf "\n  If you want to update this list type:"
    printf "\n    ${CYAN}ineo versions -u${NF}\n\n"
  fi

  if [ ! -z "$error" ]; then
    printf "$error"
  fi
}

# ==============================================================================
# HELP
# ==============================================================================

function help {
  if [ -z "$1" ]; then
    printf "$HELP"
  else
    command=$(echo "help_$1" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
    printf "${!command}"
  fi
}

# ==============================================================================
# HELPS
# ==============================================================================

HELP="
  USAGE:
    ineo <command> [options] [<arguments>]

  COMMANDS:

    create      Create a new instance with a specific <name>
    set-port    Change the port of a specific instance <name>
    versions    Show the Neo4j versions available for installation
    instances   Show the information about installed instances

    start       Start Neo4j instances
    stop        Stop Neo4j instances
    restart     Restart Neo4j instances
    status      Show instances status
    shell       Start the shell for a Neo4j instance
    console     Start a Neo4j instance in mode console

    delete-db   Delete all data of a specific instance <name>
    destroy     Remove a specific instance <name>

    install     Install ineo
    update      Update ineo
    uninstall   Uninstall ineo

    help        Show this help or help for specific [command]

"

HELP_CREATE="
  USAGE:
    create [options] <instance_name>

  DESCRIPTION:
    Create a new instance

  ARGUMENTS:
    <instance_name>  Instance name to create

  OPTIONS:
    -p <port>     Http server port for the Neo4j instance.

                  Default: 7474

    -s <port>     Https server port (SSL port) for the Neo4j instance

                  Default: <port>+1 (7475 when port is 7474)

    -v <version>  The Neo4j version for the instance

                  Default: $DEFAULT_VERSION

"

HELP_SET_PORT="
  USAGE:
    set-port [options] <instance_name> <port_number>

  DESCRIPTION:
    Change the port of a specific instance

  ARGUMENTS:
    <instance_name>  Instance name to change
    <port_number>    New port number

  OPTIONS:
    -s    Use this option to change the SSL port

"

HELP_VERSIONS="
  USAGE:
    versions

  DESCRIPTION:
    Show the Neo4j versions available for installation

  OPTIONS:
    -u    Update the list of versions available

"

HELP_INSTANCES="
  USAGE:
    instances

  DESCRIPTION:
    Show the information about installed instances

"

HELP_START="
  USAGE:
    start [options] [instance_names ...]

  DESCRIPTION:
    Start one or more Neo4j instances

  ARGUMENTS:
    [instance_names ...]  Name of one or more instances to start (optional)

                          If this argument is not specified then ineo tries
                          to start all created instances

  OPTIONS:
    -q    Start the instances without confirmation

"

HELP_STOP="
  USAGE:
    stop [options] [instance_names ...]

  DESCRIPTION:
    Stop one or more Neo4j instances

  ARGUMENTS:
    [instance_names ...]  Name of one or more instances to stop (optional)

                          If this argument is not specified then ineo tries
                          to stop all created instances

  OPTIONS:
    -q    Stop the instances without confirmation

"

HELP_RESTART="
  USAGE:
    restart [options] [instance_names ...]

  DESCRIPTION:
    Restart one or more Neo4j instances

  ARGUMENTS:
    [instance_names ...]  Name of one or more instances to restart (optional)

                          If this argument is not specified then ineo tries
                          to restart all created instances

  OPTIONS:
    -q    Restart the instances without confirmation

"

HELP_STATUS="
  USAGE:
    status [instance_names ...]

  DESCRIPTION:
    Show the status of one or more Neo4j instances

  ARGUMENTS:
    [instance_names ...]  Name of one or more instances to show status (optional)

                          If this argument is not specified then ineo tries
                          to show the status of all created instances

"

HELP_SHELL="
  USAGE:
    shell <instance_name>

  DESCRIPTION:
    Start the shell for a Neo4j instance

  ARGUMENTS:
    <instance_name>  Instance name to work with the shell

"

HELP_CONSOLE="
  USAGE:
    console <instance_name>

  DESCRIPTION:
    Start a Neo4j instance in mode console

  ARGUMENTS:
    <instance_name>  Instance name to start

"

HELP_DELETE_DB="
  USAGE:
    delete-db [options] <instance_name>

  DESCRIPTION:
    Delete the data files for a specific instance.

    This command delete the data files, so using it could be slow on test-driven.

    If you need delete the data to restart it on test-driven, use cypher instead:
      'MATCH (n) OPTIONAL MATCH (n)-[r]-() DELETE n,r;'

  ARGUMENTS:
    <instance_name>  Instance name of the data to delete

  OPTIONS:
    -f    Delete the data without confirmation

"

HELP_DESTROY="
  USAGE:
    destroy [options] <instance_name>

  DESCRIPTION:
    Destroy a specific instance

  ARGUMENTS:
    <instance_name>  Instance name to destroy

  OPTIONS:
    -f    Destroy the instance without confirmation

"

HELP_INSTALL="
  USAGE:
    install [options]

  DESCRIPTION:
    Install ineo

    Don't use this command if you already have ineo installed and working
    correctly.

  OPTIONS:
    -d <directory_name>  Directory name (absolute path) where ineo will be
                         installed

                         Default: ~/.ineo

"

HELP_UPDATE="
  USAGE:
    update

  DESCRIPTION:
    Update the current installed ineo to the last version available

"

HELP_UNINSTALL="
  USAGE:
    uninstall [options]

  DESCRIPTION:
    Uninstall ineo

  OPTIONS:
    -d <directory_name>  Directory name where ineo is installed

                         The default value is the value of the variable
                         \$INEO_HOME if it is configured

    -f                   Try to uninstall without confirmations

"

HELP_HELP="
  USAGE:
    help [command_name]

  DESCRIPTION:
    Show the help for ineo

  ARGUMENTS:
    [command_name]  Optional name to display the help for a specific command

"

# ==============================================================================
# SET COMMAND VARIABLE
# ==============================================================================

COMMAND=$1

# ==============================================================================
# LOCK FUNCTION
# ==============================================================================

if [ ! "$COMMAND" == "UPDATE_SCRIPT_BATCH" ]; then
  if ! mkdir $LOCK_DIR; then
    echo "\n  ${RED}FATAL -> Lock failed - exit${NF}\n\n" >&2
    exit 1
  fi

  if ! mkdir $TEMP_DIR; then
    echo "\n  ${RED}FATAL -> Creating then temp dir ${PURPLE}$TEMP_DIR${RED} failed - exit${NF}\n\n" >&2
    exit 1
  fi

  trap "rmdir $LOCK_DIR; rm -rf $TEMP_DIR" EXIT
fi

# ==============================================================================
# COMMAND SELECTOR
# ==============================================================================
case $COMMAND in
  install)
    install $@
    ;;
  uninstall)
    uninstall $@
    ;;
  create)
    create $@
    ;;
  destroy)
    destroy $@
    ;;
  console|start|start-no-wait|stop|restart|status|info)
    action $@
    ;;
  delete-db)
    delete-db $@
    ;;
  set-port)
    set-port $@
    ;;
  shell)
    shell $@
    ;;
  update)
    update $@
    ;;
  versions)
    versions $@
    ;;
  version)
    version $@
    ;;
  instances)
    instances $@
    ;;
  help)
    help $2
    ;;
  UPDATE_SCRIPT_BATCH)
    update_script_batch $@
    ;;
  *)
    help
    ;;
esac

exit 0
